template <typename TYPE>
class LinkedStack {
	class Box {
	public:
		TYPE Data;
		Box* pNext;
		Box(TYPE, Box* = NULL);
	};

public:
	LinkedStack();
	~LinkedStack();

public:
	void Push(const TYPE & Element);
	bool Pop(TYPE& Element);
	TYPE& Peek();
	void RemoveAll();

	size_t GetSize() const;
	bool IsEmpty() const;

private:
	void Init();
	void Destroy();

private:
	Box* pTop;
	size_t Used;
};


template <typename TYPE>
LinkedStack<TYPE>::Box::Box(TYPE Data, Box* pNext)
{
	this->Data = Data;
	this->pNext = pNext;
}

template <typename TYPE>
LinkedStack<TYPE>::LinkedStack()
{
	Init();
}

template <typename TYPE>
LinkedStack<TYPE>::~LinkedStack()
{
	Destroy();
}

template <typename TYPE>
void LinkedStack<TYPE>::Init()
{
	pTop = 0;
	Used = 0;
}

template <typename TYPE>
void LinkedStack<TYPE>::Destroy()
{
	Box* p;

	while (pTop)
	{
		p = pTop;
		pTop = pTop->pNext;
		delete p;
	}

	Init();
}


template <typename TYPE>
void LinkedStack<TYPE>::Push(const TYPE & Element)
{
	pTop = new Box(Element, pTop);
	Used++;
}

template<typename TYPE>
bool LinkedStack<TYPE>::Pop(TYPE & Element)
{
	if (Used == 0)
		return false;
	else
	{
		Element = pTop->Data;

		Box *pOld = pTop;
		pTop = pTop->next;

		delete pOld;

		Used--;

		return true;

	}
}


template<typename TYPE>
TYPE& LinkedStack<TYPE>::Peek()
{
	return pTop->data;
}

template <typename TYPE>
void LinkedStack<TYPE>::RemoveAll()
{
	Destroy();
}

template<typename TYPE>
size_t LinkedStack<TYPE>::GetSize() const
{
	return Used;
}

template<typename TYPE>
bool LinkedStack<TYPE>::IsEmpty() const
{
	return (Used == 0);
}
